package com.github.sentimentalanalysis;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.MultipleOutputs;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

public class SentimentalAnalysis {

	public static void main(String[] args) throws IOException, InterruptedException, ClassNotFoundException {

		Path inputPath = new Path(args[0]);
		Path outputDir = new Path(args[1]);
		String[] listOfEmotions = { "Anger", "Joy", "Amusement", "Surpise", "Issue/Bugs", "Swearing" };

		// Create configuration
		Configuration conf = new Configuration(true);

		Job job = new Job(conf, "SentimentalAnalysis");
		job.setMapperClass(GithubSentimentalAnlysisMapper.class);
		job.setNumReduceTasks(0);
		FileInputFormat.addInputPath(job, inputPath);
		
		

		// Configure the MultipleOutputs by adding an output called "bins"
		// With the proper output format and mapper key/value pairs
		MultipleOutputs.addNamedOutput(job, "emotionbins", TextOutputFormat.class,
				Text.class, NullWritable.class);

		// Enable the counters for the job
		// If there is a significant number of different named outputs, this
		// should be disabled
		MultipleOutputs.setCountersEnabled(job, true);
		Job job1 = new Job(conf, "SentimentalAnalysisEmotion");
		for(String emotion:listOfEmotions){
			Path inputPathEmotionFile = new Path( emotion+"-m-00000");
			FileInputFormat.addInputPath(job1, inputPathEmotionFile);
			job1.setMapperClass(GithubSentimentalAnlysisEmotionMapper.class);
			job1.setReducerClass(GithubSentimentalAnalysisReducer.class);
			job1.setCombinerClass(GithubSentimentalAnalysisReducer.class);
			job1.setNumReduceTasks(1);
			job1.setOutputKeyClass(Text.class);
			job1.setOutputValueClass(IntWritable.class);
			FileOutputFormat.setOutputPath(job1, outputDir);
			job1.setOutputFormatClass(TextOutputFormat.class);
		}

		// Create job
		
		//job.setJarByClass(GithubSentimentalAnlysisMapper.class);

		// Setup MapReduce
//		job1.setMapperClass(GithubSentimentalAnlysisEmotionMapper.class);
//		job1.setReducerClass(GithubSentimentalAnalysisReducer.class);
//		job1.setCombinerClass(GithubSentimentalAnalysisReducer.class);
//		job1.setNumReduceTasks(1);
//		job1.setOutputKeyClass(Text.class);
//		job1.setOutputValueClass(IntWritable.class);
//
//		// Specify key / value
//		job.setMapOutputKeyClass(CompositeKeyWritable.class);
//		job.setMapOutputValueClass(IntWritable.class);
//		job.setOutputKeyClass(Text.class);
//		job.setOutputValueClass(IntWritable.class);
//		job.setPartitionerClass(EmotionPartitioner.class);
//		// Input
//		FileInputFormat.addInputPath(job, inputPath);
//		// job.setInputFormatClass(KeyValueTextInputFormat.class);
//
//		// Output
		FileOutputFormat.setOutputPath(job, outputDir);
		job.setOutputFormatClass(TextOutputFormat.class);

		// Delete output if exists
		FileSystem hdfs = FileSystem.get(conf);
		if (hdfs.exists(outputDir))
			hdfs.delete(outputDir, true);

		// Execute job
		int code = job1.waitForCompletion(true) ? 0 : 1;
		System.exit(code);

	}

}