package com.github.sentimentalanalysis;

import java.io.IOException;
import java.util.Map.Entry;
import java.util.TreeMap;

import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.SortedMapWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.mapreduce.Reducer;

public class GithubSentimentalAnalysisReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
	TreeMap<Float, Integer> sortedMap = new TreeMap<Float, Integer>();
	StabdardDeviationAndMedian median = new StabdardDeviationAndMedian();

	public void reduce(Text key, Iterable<SortedMapWritable> values, Context context)
			throws IOException, InterruptedException {
		double sum = 0;
		int count = 0;
		sortedMap.clear();
		median.setStandarddeviation(0);
		median.setMedian(0);
		for (SortedMapWritable value : values) {
			for (Entry<WritableComparable, Writable> ratingEntry : value.entrySet()) {
				float temprating = ((FloatWritable) ratingEntry.getKey()).get();
				int tmpcount = ((IntWritable) ratingEntry.getValue()).get();
				sum = sum + (tmpcount * temprating);
				count=count+tmpcount;

				if (sortedMap.get(temprating) == null) {
					sortedMap.put(temprating, tmpcount);
				} else {
					int tmpCount1 = sortedMap.get(temprating);
					sortedMap.put(temprating,tmpCount1+tmpcount );
				}
			}
		//	value.clear();
		}
		//median code
		int medianIndex=count/2;
		float previousRating=0;
		float ratinginTmp=0;
		float prevKey=0;
		
		for (Entry<Float, Integer> sortedMapOther : sortedMap.entrySet()) {
			ratinginTmp=previousRating+sortedMapOther.getValue();
		
		if(previousRating<=medianIndex && medianIndex<ratinginTmp){
			if(count%2==0&& previousRating==medianIndex){
			median.setMedian((float)(sortedMapOther.getKey()+prevKey)/2.0f);
		}
		else{
			median.setMedian((sortedMapOther.getKey()));
		}
			break;
		}
		previousRating=ratinginTmp;
		prevKey=sortedMapOther.getKey();
		}

		
		double mean = sum / count;
		double sumOfSquares=0;
		for (Entry<Float, Integer> sortedMapOther : sortedMap.entrySet()) {
			sumOfSquares =sumOfSquares+ (sortedMapOther.getKey()- mean) * (sortedMapOther.getKey() - mean) * sortedMapOther.getValue() ;
		}

	
		median.setStandarddeviation((double) Math.sqrt(sumOfSquares / (count - 1)));
		context.write(key, median);
	}

}
